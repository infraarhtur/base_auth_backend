"""create_invalidated_tokens_table

Revision ID: decb2109c704
Revises: 0486523b3093
Create Date: 2025-08-10 10:33:01.157900

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'decb2109c704'
down_revision: Union[str, Sequence[str], None] = '0486523b3093'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('invalidated_tokens',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('company_id', sa.UUID(), nullable=False),
    sa.Column('invalidated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('token_type', sa.String(length=20), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], name=op.f('fk_invalidated_tokens_company_id_company')),
    sa.ForeignKeyConstraint(['user_id'], ['app_user.id'], name=op.f('fk_invalidated_tokens_user_id_app_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_invalidated_tokens'))
    )
    op.create_index(op.f('ix_invalidated_tokens_company_id'), 'invalidated_tokens', ['company_id'], unique=False)
    op.create_index(op.f('ix_invalidated_tokens_expires_at'), 'invalidated_tokens', ['expires_at'], unique=False)
    op.create_index(op.f('ix_invalidated_tokens_token_hash'), 'invalidated_tokens', ['token_hash'], unique=True)
    op.create_index(op.f('ix_invalidated_tokens_user_id'), 'invalidated_tokens', ['user_id'], unique=False)
    op.alter_column('app_user', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('app_user', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('app_user_email_key'), 'app_user', type_='unique')
    op.create_index('ix_app_user_email', 'app_user', ['email'], unique=False)
    op.create_index(op.f('ix_app_user_id'), 'app_user', ['id'], unique=False)
    op.alter_column('company', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('company', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_company_id'), 'company', ['id'], unique=False)
    op.create_index('ix_company_name', 'company', ['name'], unique=False)
    op.alter_column('company_user', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.create_index('ix_company_user_company_id', 'company_user', ['company_id'], unique=False)
    op.create_index('ix_company_user_user_id', 'company_user', ['user_id'], unique=False)
    op.drop_constraint(op.f('permission_name_key'), 'permission', type_='unique')
    op.create_index(op.f('ix_permission_id'), 'permission', ['id'], unique=False)
    op.create_index('ix_permission_name', 'permission', ['name'], unique=False)
    op.create_unique_constraint(op.f('uq_permission_name'), 'permission', ['name'])
    op.drop_constraint(op.f('role_company_id_name_key'), 'role', type_='unique')
    op.create_index('ix_role_company_id', 'role', ['company_id'], unique=False)
    op.create_index(op.f('ix_role_id'), 'role', ['id'], unique=False)
    op.create_index('ix_role_name', 'role', ['name'], unique=False)
    op.create_index('ix_role_permission_permission_id', 'role_permission', ['permission_id'], unique=False)
    op.create_index('ix_role_permission_role_id', 'role_permission', ['role_id'], unique=False)
    op.alter_column('user_identity', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('user_identity', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('user_identity_provider_provider_user_id_key'), 'user_identity', type_='unique')
    op.create_index(op.f('ix_user_identity_id'), 'user_identity', ['id'], unique=False)
    op.create_index('ix_user_identity_provider', 'user_identity', ['provider'], unique=False)
    op.create_index(op.f('ix_user_identity_provider_user_id'), 'user_identity', ['provider_user_id'], unique=False)
    op.create_index('ix_user_identity_user_id', 'user_identity', ['user_id'], unique=False)
    op.create_index('ix_user_role_role_id', 'user_role', ['role_id'], unique=False)
    op.create_index('ix_user_role_user_id', 'user_role', ['user_id'], unique=False)
    op.drop_column('user_role', 'created_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_role', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.drop_index('ix_user_role_user_id', table_name='user_role')
    op.drop_index('ix_user_role_role_id', table_name='user_role')
    op.drop_index('ix_user_identity_user_id', table_name='user_identity')
    op.drop_index(op.f('ix_user_identity_provider_user_id'), table_name='user_identity')
    op.drop_index('ix_user_identity_provider', table_name='user_identity')
    op.drop_index(op.f('ix_user_identity_id'), table_name='user_identity')
    op.create_unique_constraint(op.f('user_identity_provider_provider_user_id_key'), 'user_identity', ['provider', 'provider_user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('user_identity', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_identity', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index('ix_role_permission_role_id', table_name='role_permission')
    op.drop_index('ix_role_permission_permission_id', table_name='role_permission')
    op.drop_index('ix_role_name', table_name='role')
    op.drop_index(op.f('ix_role_id'), table_name='role')
    op.drop_index('ix_role_company_id', table_name='role')
    op.create_unique_constraint(op.f('role_company_id_name_key'), 'role', ['company_id', 'name'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(op.f('uq_permission_name'), 'permission', type_='unique')
    op.drop_index('ix_permission_name', table_name='permission')
    op.drop_index(op.f('ix_permission_id'), table_name='permission')
    op.create_unique_constraint(op.f('permission_name_key'), 'permission', ['name'], postgresql_nulls_not_distinct=False)
    op.drop_index('ix_company_user_user_id', table_name='company_user')
    op.drop_index('ix_company_user_company_id', table_name='company_user')
    op.alter_column('company_user', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_index('ix_company_name', table_name='company')
    op.drop_index(op.f('ix_company_id'), table_name='company')
    op.alter_column('company', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('company', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_index(op.f('ix_app_user_id'), table_name='app_user')
    op.drop_index('ix_app_user_email', table_name='app_user')
    op.create_unique_constraint(op.f('app_user_email_key'), 'app_user', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('app_user', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('app_user', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_index(op.f('ix_invalidated_tokens_user_id'), table_name='invalidated_tokens')
    op.drop_index(op.f('ix_invalidated_tokens_token_hash'), table_name='invalidated_tokens')
    op.drop_index(op.f('ix_invalidated_tokens_expires_at'), table_name='invalidated_tokens')
    op.drop_index(op.f('ix_invalidated_tokens_company_id'), table_name='invalidated_tokens')
    op.drop_table('invalidated_tokens')
    # ### end Alembic commands ###
