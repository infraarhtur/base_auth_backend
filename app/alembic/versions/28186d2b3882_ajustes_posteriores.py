"""ajustes posteriores

Revision ID: 28186d2b3882
Revises: 177d058d549e
Create Date: 2025-08-05 17:49:11.701190

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '28186d2b3882'
down_revision: Union[str, Sequence[str], None] = '177d058d549e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Eliminar vistas que dependen de las columnas que vamos a modificar
    op.execute("DROP VIEW IF EXISTS user_company_roles_permissions CASCADE")
    op.execute("DROP VIEW IF EXISTS user_company_roles_permissions_filtered CASCADE")
    
    # ### commands auto generated by Alembic - please adjust! ###
    # Agregar columnas con valores por defecto para datos existentes
    op.add_column('app_user', sa.Column('username', sa.String(length=100), nullable=True))
    op.add_column('app_user', sa.Column('first_name', sa.String(length=100), nullable=True))
    op.add_column('app_user', sa.Column('last_name', sa.String(length=100), nullable=True))
    op.add_column('app_user', sa.Column('is_superuser', sa.Boolean(), nullable=True))
    op.add_column('app_user', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.add_column('app_user', sa.Column('phone', sa.String(length=20), nullable=True))
    op.add_column('app_user', sa.Column('avatar_url', sa.String(length=500), nullable=True))
    op.add_column('app_user', sa.Column('preferences', sa.Text(), nullable=True))
    op.add_column('app_user', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('app_user', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('app_user', 'hashed_password',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('app_user', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('app_user', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('app_user', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('app_user_email_key'), 'app_user', type_='unique')
    op.create_index('ix_app_user_active', 'app_user', ['is_active'], unique=False)
    op.create_index(op.f('ix_app_user_email'), 'app_user', ['email'], unique=True)
    op.create_index(op.f('ix_app_user_id'), 'app_user', ['id'], unique=False)
    op.create_index('ix_app_user_superuser', 'app_user', ['is_superuser'], unique=False)
    op.create_index(op.f('ix_app_user_username'), 'app_user', ['username'], unique=True)
    
    # Actualizar valores por defecto para registros existentes
    op.execute("UPDATE app_user SET username = email WHERE username IS NULL")
    op.execute("UPDATE app_user SET first_name = 'Usuario' WHERE first_name IS NULL")
    op.execute("UPDATE app_user SET last_name = 'Sin Nombre' WHERE last_name IS NULL")
    op.execute("UPDATE app_user SET is_superuser = false WHERE is_superuser IS NULL")
    op.execute("UPDATE app_user SET is_verified = false WHERE is_verified IS NULL")
    
    # Hacer las columnas NOT NULL despu√©s de actualizar los valores
    op.alter_column('app_user', 'username', nullable=False)
    op.alter_column('app_user', 'first_name', nullable=False)
    op.alter_column('app_user', 'last_name', nullable=False)
    op.alter_column('app_user', 'is_superuser', nullable=False)
    op.alter_column('app_user', 'is_verified', nullable=False)
    
    op.drop_column('app_user', 'name')
    op.add_column('company', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('company', sa.Column('domain', sa.String(length=255), nullable=True))
    op.add_column('company', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('company', sa.Column('settings', sa.Text(), nullable=True))
    op.add_column('company', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('company', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('company', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('company', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index('ix_company_active', 'company', ['is_active'], unique=False)
    op.create_index('ix_company_domain', 'company', ['domain'], unique=False)
    op.create_index(op.f('ix_company_id'), 'company', ['id'], unique=False)
    op.create_index('ix_company_name', 'company', ['name'], unique=False)
    op.create_unique_constraint(op.f('uq_company_domain'), 'company', ['domain'])
    op.add_column('company_user', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('company_user', sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('company_user', sa.Column('id', sa.Integer(), autoincrement=True, nullable=False))
    op.add_column('company_user', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('company_user', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('company_user', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('company_user', 'company_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.create_index('ix_company_user_active', 'company_user', ['is_active'], unique=False)
    op.create_index('ix_company_user_company_id', 'company_user', ['company_id'], unique=False)
    op.create_index(op.f('ix_company_user_id'), 'company_user', ['id'], unique=False)
    op.create_index('ix_company_user_unique', 'company_user', ['user_id', 'company_id'], unique=True)
    op.create_index('ix_company_user_user_id', 'company_user', ['user_id'], unique=False)
    
    # Actualizar valores por defecto para company_user
    op.execute("UPDATE company_user SET is_active = true WHERE is_active IS NULL")
    op.alter_column('company_user', 'is_active', nullable=False)
    
    op.add_column('permission', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('permission', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('permission', sa.Column('is_system', sa.Boolean(), nullable=False))
    op.add_column('permission', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('permission', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('permission', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('permission', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(op.f('permission_name_key'), 'permission', type_='unique')
    op.create_index('ix_permission_active', 'permission', ['is_active'], unique=False)
    op.create_index(op.f('ix_permission_id'), 'permission', ['id'], unique=False)
    op.create_index(op.f('ix_permission_name'), 'permission', ['name'], unique=True)
    op.create_index('ix_permission_system', 'permission', ['is_system'], unique=False)
    op.add_column('role', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('role', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('role', sa.Column('is_system', sa.Boolean(), nullable=False))
    op.add_column('role', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('role', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('role', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('role', 'company_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('role', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(op.f('role_company_id_name_key'), 'role', type_='unique')
    op.create_index('ix_role_active', 'role', ['is_active'], unique=False)
    op.create_index('ix_role_company_id', 'role', ['company_id'], unique=False)
    op.create_index(op.f('ix_role_id'), 'role', ['id'], unique=False)
    op.create_index('ix_role_name', 'role', ['name'], unique=False)
    op.create_index('ix_role_system', 'role', ['is_system'], unique=False)
    op.add_column('role_permission', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('role_permission', sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('role_permission', sa.Column('id', sa.Integer(), autoincrement=True, nullable=False))
    op.add_column('role_permission', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('role_permission', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('role_permission', 'role_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('role_permission', 'permission_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.create_index('ix_role_permission_active', 'role_permission', ['is_active'], unique=False)
    op.create_index(op.f('ix_role_permission_id'), 'role_permission', ['id'], unique=False)
    op.create_index('ix_role_permission_permission_id', 'role_permission', ['permission_id'], unique=False)
    op.create_index('ix_role_permission_role_id', 'role_permission', ['role_id'], unique=False)
    op.create_index('ix_role_permission_unique', 'role_permission', ['role_id', 'permission_id'], unique=True)
    op.add_column('user_identity', sa.Column('provider_email', sa.String(length=255), nullable=True))
    op.add_column('user_identity', sa.Column('provider_name', sa.String(length=255), nullable=True))
    op.add_column('user_identity', sa.Column('provider_avatar', sa.String(length=500), nullable=True))
    op.add_column('user_identity', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('user_identity', sa.Column('is_verified', sa.Boolean(), nullable=False))
    op.add_column('user_identity', sa.Column('provider_data', sa.Text(), nullable=True))
    op.add_column('user_identity', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('user_identity', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('user_identity', 'provider',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('user_identity', 'provider_user_id',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('user_identity', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('user_identity', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('user_identity_provider_provider_user_id_key'), 'user_identity', type_='unique')
    op.create_index('ix_user_identity_active', 'user_identity', ['is_active'], unique=False)
    op.create_index(op.f('ix_user_identity_id'), 'user_identity', ['id'], unique=False)
    op.create_index('ix_user_identity_provider', 'user_identity', ['provider'], unique=False)
    op.create_index(op.f('ix_user_identity_provider_user_id'), 'user_identity', ['provider_user_id'], unique=False)
    op.create_index('ix_user_identity_unique', 'user_identity', ['provider', 'provider_user_id'], unique=True)
    op.create_index('ix_user_identity_user_id', 'user_identity', ['user_id'], unique=False)
    op.drop_column('user_identity', 'name')
    op.drop_column('user_identity', 'email')
    op.add_column('user_role', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('user_role', sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('user_role', sa.Column('id', sa.Integer(), autoincrement=True, nullable=False))
    op.add_column('user_role', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('user_role', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('user_role', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('user_role', 'role_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.create_index('ix_user_role_active', 'user_role', ['is_active'], unique=False)
    op.create_index(op.f('ix_user_role_id'), 'user_role', ['id'], unique=False)
    op.create_index('ix_user_role_role_id', 'user_role', ['role_id'], unique=False)
    op.create_index('ix_user_role_unique', 'user_role', ['user_id', 'role_id'], unique=True)
    op.create_index('ix_user_role_user_id', 'user_role', ['user_id'], unique=False)
    
    # Recrear las vistas despu√©s de todos los cambios
    op.execute("""
        CREATE VIEW user_company_roles_permissions AS
        SELECT 
            u.id as user_id,
            u.email,
            u.username,
            u.first_name,
            u.last_name,
            c.id as company_id,
            c.name as company_name,
            r.id as role_id,
            r.name as role_name,
            p.id as permission_id,
            p.name as permission_name,
            p.description as permission_description
        FROM app_user u
        JOIN company_user cu ON u.id = cu.user_id
        JOIN company c ON cu.company_id = c.id
        JOIN user_role ur ON u.id = ur.user_id
        JOIN role r ON ur.role_id = r.id
        JOIN role_permission rp ON r.id = rp.role_id
        JOIN permission p ON rp.permission_id = p.id
        WHERE cu.is_active = true AND ur.is_active = true AND rp.is_active = true
    """)
    
    op.execute("""
        CREATE VIEW user_company_roles_permissions_filtered AS
        SELECT 
            u.id as user_id,
            u.email,
            u.username,
            u.first_name,
            u.last_name,
            c.id as company_id,
            c.name as company_name,
            r.id as role_id,
            r.name as role_name,
            p.id as permission_id,
            p.name as permission_name,
            p.description as permission_description
        FROM app_user u
        JOIN company_user cu ON u.id = cu.user_id
        JOIN company c ON cu.company_id = c.id
        JOIN user_role ur ON u.id = ur.user_id
        JOIN role r ON ur.role_id = r.id
        JOIN role_permission rp ON r.id = rp.role_id
        JOIN permission p ON rp.permission_id = p.id
        WHERE cu.is_active = true 
          AND ur.is_active = true 
          AND rp.is_active = true
          AND u.is_active = true
          AND c.is_active = true
          AND r.is_active = true
          AND p.is_active = true
    """)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_user_role_user_id', table_name='user_role')
    op.drop_index('ix_user_role_unique', table_name='user_role')
    op.drop_index('ix_user_role_role_id', table_name='user_role')
    op.drop_index(op.f('ix_user_role_id'), table_name='user_role')
    op.drop_index('ix_user_role_active', table_name='user_role')
    op.alter_column('user_role', 'role_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('user_role', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_column('user_role', 'updated_at')
    op.drop_column('user_role', 'created_at')
    op.drop_column('user_role', 'id')
    op.drop_column('user_role', 'assigned_at')
    op.drop_column('user_role', 'is_active')
    op.add_column('user_identity', sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('user_identity', sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index('ix_user_identity_user_id', table_name='user_identity')
    op.drop_index('ix_user_identity_unique', table_name='user_identity')
    op.drop_index(op.f('ix_user_identity_provider_user_id'), table_name='user_identity')
    op.drop_index('ix_user_identity_provider', table_name='user_identity')
    op.drop_index(op.f('ix_user_identity_id'), table_name='user_identity')
    op.drop_index('ix_user_identity_active', table_name='user_identity')
    op.create_unique_constraint(op.f('user_identity_provider_provider_user_id_key'), 'user_identity', ['provider', 'provider_user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('user_identity', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_identity', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('user_identity', 'provider_user_id',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('user_identity', 'provider',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('user_identity', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               nullable=True)
    op.drop_column('user_identity', 'updated_at')
    op.drop_column('user_identity', 'provider_data')
    op.drop_column('user_identity', 'is_verified')
    op.drop_column('user_identity', 'is_active')
    op.drop_column('user_identity', 'provider_avatar')
    op.drop_column('user_identity', 'provider_name')
    op.drop_column('user_identity', 'provider_email')
    op.drop_index('ix_role_permission_unique', table_name='role_permission')
    op.drop_index('ix_role_permission_role_id', table_name='role_permission')
    op.drop_index('ix_role_permission_permission_id', table_name='role_permission')
    op.drop_index(op.f('ix_role_permission_id'), table_name='role_permission')
    op.drop_index('ix_role_permission_active', table_name='role_permission')
    op.alter_column('role_permission', 'permission_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('role_permission', 'role_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_column('role_permission', 'updated_at')
    op.drop_column('role_permission', 'created_at')
    op.drop_column('role_permission', 'id')
    op.drop_column('role_permission', 'assigned_at')
    op.drop_column('role_permission', 'is_active')
    op.drop_index('ix_role_system', table_name='role')
    op.drop_index('ix_role_name', table_name='role')
    op.drop_index(op.f('ix_role_id'), table_name='role')
    op.drop_index('ix_role_company_id', table_name='role')
    op.drop_index('ix_role_active', table_name='role')
    op.create_unique_constraint(op.f('role_company_id_name_key'), 'role', ['company_id', 'name'], postgresql_nulls_not_distinct=False)
    op.alter_column('role', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('role', 'company_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('role', 'name',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('role', 'updated_at')
    op.drop_column('role', 'created_at')
    op.drop_column('role', 'is_system')
    op.drop_column('role', 'is_active')
    op.drop_column('role', 'description')
    op.drop_index('ix_permission_system', table_name='permission')
    op.drop_index(op.f('ix_permission_name'), table_name='permission')
    op.drop_index(op.f('ix_permission_id'), table_name='permission')
    op.drop_index('ix_permission_active', table_name='permission')
    op.create_unique_constraint(op.f('permission_name_key'), 'permission', ['name'], postgresql_nulls_not_distinct=False)
    op.alter_column('permission', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('permission', 'name',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('permission', 'updated_at')
    op.drop_column('permission', 'created_at')
    op.drop_column('permission', 'is_system')
    op.drop_column('permission', 'is_active')
    op.drop_column('permission', 'description')
    op.drop_index('ix_company_user_user_id', table_name='company_user')
    op.drop_index('ix_company_user_unique', table_name='company_user')
    op.drop_index(op.f('ix_company_user_id'), table_name='company_user')
    op.drop_index('ix_company_user_company_id', table_name='company_user')
    op.drop_index('ix_company_user_active', table_name='company_user')
    op.alter_column('company_user', 'company_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('company_user', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_column('company_user', 'updated_at')
    op.drop_column('company_user', 'created_at')
    op.drop_column('company_user', 'id')
    op.drop_column('company_user', 'joined_at')
    op.drop_column('company_user', 'is_active')
    op.drop_constraint(op.f('uq_company_domain'), 'company', type_='unique')
    op.drop_index('ix_company_name', table_name='company')
    op.drop_index(op.f('ix_company_id'), table_name='company')
    op.drop_index('ix_company_domain', table_name='company')
    op.drop_index('ix_company_active', table_name='company')
    op.alter_column('company', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('company', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('company', 'name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('company', 'updated_at')
    op.drop_column('company', 'settings')
    op.drop_column('company', 'is_active')
    op.drop_column('company', 'domain')
    op.drop_column('company', 'description')
    op.add_column('app_user', sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_app_user_username'), table_name='app_user')
    op.drop_index('ix_app_user_superuser', table_name='app_user')
    op.drop_index(op.f('ix_app_user_id'), table_name='app_user')
    op.drop_index(op.f('ix_app_user_email'), table_name='app_user')
    op.drop_index('ix_app_user_active', table_name='app_user')
    op.create_unique_constraint(op.f('app_user_email_key'), 'app_user', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('app_user', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('app_user', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('app_user', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('app_user', 'hashed_password',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('app_user', 'email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('app_user', 'updated_at')
    op.drop_column('app_user', 'preferences')
    op.drop_column('app_user', 'avatar_url')
    op.drop_column('app_user', 'phone')
    op.drop_column('app_user', 'is_verified')
    op.drop_column('app_user', 'is_superuser')
    op.drop_column('app_user', 'last_name')
    op.drop_column('app_user', 'first_name')
    op.drop_column('app_user', 'username')
    # ### end Alembic commands ###
